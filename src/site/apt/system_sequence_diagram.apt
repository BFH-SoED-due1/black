    ----------
    System Sequence Diagram
    ----------
    ----------
    December 23, 2016

System Sequence Diagram

  A System Sequence Diagram (SSD) is a visual summary of an individual use case.
The diagram places emphasis on events that involve interaction between actors and systems.

[images/system_sequence_diagram1.svg] System Sequence Diagram 1

  The first System Sequence Diagram focuses on the LogIn and SignUp use cases of the SRS.

  It shows at first the <<<signUp>>> use case, which is a call from the <<<User>>> to the <<<SRS>>>.
If the process turns out positive the <<<SRS>>> will <<<show the LoginView>>> to the <<<User>>> and also <<<confirm the SignUp>>>.

  Secondly there's the <<<logIn>>> use case. If this process turns out positive the <<<SRS>>> will <<<show the ReservationView>>>,
which includes the <<<MakeView>>> (to create a new Reservation) and the <<<TableView>>>
(to view the existing Reservations and also offer the option to delete Reservations) to the <<<User>>>.

[images/system_sequence_diagram2.svg] System Sequence Diagram 2

  The second System Sequence Diagram focuses on the MakeReservation use case of the SRS.

  Starting off in this SSD there's the main use case, which is called <<<makeReservation>>>.
When a Reservation is successfully made, the <<<SRS>>> will <<<confirm the Reservation>>> to the <<<User>>>,
while also <<<updating the TableView>>> with the new Reservation.

  The last use case described shows the <<<cancelReservation>>> process.
When a Reservation gets cancelled the <<<TableView gets updated>>> and the affected Reservation gets removed off of it.

Sequence Diagram

  The Sequence Diagram is an interaction diagram that shows how objects operate with one another and in what order.
It is a construct of a message sequence chart.

[images/sequence_diagram.svg] Sequence Diagram

  This Sequence Diagram focuses in detail on the MakeReservation use case of the SRS.
It only shows the happy case and assumes that the <<<User>>> is already signed up and logged into the system.
The <<<User>>> makes the call to make a new Reservation <<<res>>> through the User Interface (<<<UI>>>).
Internally this call will go through the <<<ReservationController>>>, which will invocate the <<<addReservation>>> method from the <<<DataModel>>>.
The <<<addReservation>>> method includes the Customer <<<c>>> object, the user specified Room <<<r>>> object and the specified <<<begin>>>/<<<end>>> times.
This method will result in a <new> Reservation <<<res>>> object, which gets returned to the <<<DataModel>>>.
After this process the <<<ReservationController>>> will confirm the Reservation through the <<<UI>>> to the <<<User>>>.
